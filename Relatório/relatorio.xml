<?xml version="1.0" encoding="UTF-8"?>
<report>
    <front-matter>
        <meta>
            <title>Processamento de Linguagens e Conhecimento</title>
            <subtitle>Um Gestor de Audições/Concertos Musicais</subtitle>
            <authors>
                <author>
                    <name>Patrícia Barros</name>
                    <identifier>a67665</identifier>
                    <email>a67665@alunos.uminho.pt</email>
                    <photo path="7.jpg"/>
                </author>
                <author>
                    <name>Xavier Francisco</name>
                    <identifier>a67725</identifier>
                    <email>a67725@alunos.uminho.pt</email>
                    <photo path="4.jpg"/>
                </author>
            </authors>
            <date>2016-01-18</date>
            <affil>Universidade do Minho</affil>
        </meta>
        <abstract>
            <p>Este relatório descreve todo o processo de desenvolvimento e decisões tomadas para a realização do trabalho final do perfil de Processamento de Linguagens e Compiladores.</p>
            <p>O problema a resolver consiste na criação de um sistema que permita a gestão de audições musicais de uma escola de música.</p>
        </abstract>
        <toc/>
        <lof/>
    </front-matter>
    <body>
        <section>
            <title>Estrutura do Relatório</title>
           <p>Este relatório está organizado em capítulos e secções. No capítulo 1 podemos encontrar um apanhado de informações sobre o projeto, nomeadamente sobre o contexto, motivação, objetivos e resultados do mesmo.</p>
           <p>O capítulo 2  expõe o enunciado do trabalho.</p>
           <p>De seguida, o capítulo 3 engloba todas as secções relativas ao desenvolvimento do projeto: todas as decisões tomadas e uma descrição de tudo o que foi feito.</p>
           <p>Por último, o capítulo 4 contém algumas conclusões sobre o trabalho realizado, nomeadamente o estado do mesmo, o trabalho futuro e um comentário de opinião pessoal.</p>
        </section>
        <section>
            <title>Introdução</title>
            <subsection>
                <title>Contextualização</title>
               <p>Este trabalho foi realizado no âmbito das Unidades Curriculares de Gramáticas na Compreensão de Software e Processamento e Representação de Informação, dizendo respeito às matérias leccionadas em ambas: gramáticas independentes de contexto, gramáticas de atributos, DTD's, XPath, XSLT, XML Schema e formulários HTML.</p>
            </subsection>
            <subsection>
                <title>Objetivos</title>
               <p>Este trabalho tem como objetivos consolidar todo o conhecimento adquirido ao longo do semestre nas duas Unidades Curriculares a que diz respeito mas também dar resposta a uma necessidade que existe atualmente no Mundo real, tornando ainda o projeto mais aliciante.</p>
            </subsection>
            <subsection>
                <title>Motivação</title>
               <p>Atualmente praticamente nenhuma das aplicações existentes para gerir escolas tem a funcionalidade de gerir audições ou concertos pois esta é uma necessidade específica de uma escola de música que ao longo de um ano letivo poderá ter que organizar dezenas ou centenas de audições e concertos. Posto isto é importante começar a dar resposta às escolas de música nesse sentido.</p>
            </subsection>
            <subsection>
                <title>Ferramentas</title>
               <p>Para o desenvolvimento deste projeto foram necessárias várias ferramentas de desenvolvimento que passamos a nomear.</p>
               <p>Para gerir o desenvolvimento de código em paralelo pelos dois membros da equipa utilizamos uma ferramenta de controlo de versões, o <i><b>Github</b></i>.</p>
               <p>Para o desenvolvimento propriamente dito do projeto utilizamos <i><b>HTML</b></i>, <i><b>PHP</b></i> e <i><b>Javascript</b></i>. Recorremos ainda ao <i><b>CSS</b></i> para melhorar o aspeto estético do sistema. Utilizámos ainda algomas funcionalidades do <i><b>Bootsrap</b></i>, nomeadamente para a formatação das tabelas de listagem e dos botões.</p>
               <p>Para lidar com os ficheiros de texto que guardam os dados do nosso sistema recorremos ao <i><b>XML</b></i> e utilizamos <i><b>XSL</b></i> para os transformar em ficheiros <i>javascript</i> e <i>html</i>. Utilizamos ainda <i><b>XSL-FO</b></i> para gerar um documento <i>PDF</i> a partir de um <i>XML</i></p>
               <p>Utilizamos ainda <i><b>ANTLR</b></i> para criar uma linguagem de suporte a uma parte do nosso sistema.</p>
               <p>Para facilitar o nosso trabalho recorremos a alguns <i>IDE's</i> como o <i><b>Oxygen</b></i> e o <i><b>Intelij</b></i>.</p>
            </subsection>
        </section>
        <section>
            <title>Desenvolvimento</title>
            <subsection>
                <title>Arquitetura do Sistema</title>
                <p>Para começar a descrição do trabalho que realizamos segue-se um desenho da arquitetura do sistema para que seja facilmente perceptível qual a abordagem que utilizamos.</p>
                <image path="PLC.png">Desenho da arquitetura do Sistema</image>
                <p>Apesar de o sistema ser um gestor de audições decidimos também manipular informação sobre os alunos e professores da escola de música.</p>
                <p>O utilizador pode consultar toda a informação sobre essas três entidades, sendo que os dados são extraídos dos ficheiros <i>XML</i> pré-definidos (alunos.xml, professores.xml e audicoes.xml) através de um <i>XSL</i> que gera um <i>HTML</i>.</p>
                <p>Ao alterar/adicionar dados, estes são validados e posteriormente adicionados aos ficheiros <i>XML</i> correspondentes.</p>
            </subsection>
            <subsection>
                <title>Armazenamento de Dados</title>
                <p>Decidimos utilizar ficheiros <i>XML</i> para guardar todos os dados relevantes da escola de música: alunos, professores, cursos, instrumentos, audições, obras e compositores. Para cada uma destas entidades existe um ficheiro <i>XML</i> que lhe oferece suporte.</p>
                <p>Passamos então a descrever a estrutura dos documentos <i>XML</i> utilizados para suportar toda a indormação do sistema.</p>
                <subsubsection>
                    <title>Modelos</title>
                    <p><b>Aluno:</b></p>
                    <list>
                        <ul>código/identificador único;</ul>
                        <ul>nome;</ul>
                        <ul>data de nascimento;</ul>
                        <ul>curso em que está matriculado;</ul>
                        <ul>ano do curso que frequenta;</ul>
                        <ul>instrumento que toca;</ul>
                    </list>
                    <image path="dtdAlunos.png"><i>Schema</i> representativo da estrutura do ficheiro <i>XML</i> que suporta a informação dos alunos.</image>
                    <p><b>Professor:</b></p>
                    <list>
                        <ul>código/identificador único;</ul>
                        <ul>nome;</ul>
                        <ul>data de nascimento;</ul>
                        <ul>abilitação académica (que nível de formação tem e em quê);</ul>
                        <ul>curso que lecciona;</ul>
                    </list>
                    <image path="dtdProfessores.png"><i>Schema</i> representativo da estrutura do ficheiro <i>XML</i> que suporta a informação dos professores.</image>
                    <p><b>Audição:</b></p>
                    <list>
                        <ul>nome/título;</ul>
                        <ul>local;</ul>
                        <ul>data;</ul>
                        <ul>duração esperada;</ul>
                        <ul>hora de inicio;</ul>
                        <ul>atuaçoes: cada atuaçao tem um nome, duração e uma lista de alunos e professores;</ul>
                    </list>
                    <image path="dtdAudicoes.png"><i>Schema</i> representativo da estrutura do ficheiro <i>XML</i> que suporta a informação das audições.</image>
                </subsubsection>
            </subsection>
            <subsection>
                <title>Funcionalidades</title>
                <p>Passamos agora a descrever detalhadamente como foi implementada cada uma das funcionalidades que o nosso sistema tem para oferecer e todas as decisões tomadas em relação a elas.</p>
                <subsubsection>
                    <title>Listar Alunos/Professores</title>
                    <p>Os alunos e professores são listados da mesma forma: a partir do ficheiro <i>XML</i> pré-definido (alunos.xml) é gerado um ficheiro .js através de um processador <i>XSLT</i> que contém algumas informações sobre os elementos (id, nome e instrumento/curso) guardadas em arrays. Na página em que é apresentada a listagem é carregado um outro .js que povoa a tabela de acordo com os arrays de informações disponíveis. São ainda adicionados para cada elemento três botões que dão acesso às funcionalidades de consultar, alterar e remover.</p>
                    <p>A tabela em que são apresentados os resultados é paginada, ou seja, são apresentados no máximo 20 resultados por página e é possível navegar para outras páginas. Isto foi conseguido através de uma biblioteca <i>javascript</i> já existente chamada <i>pagination.js</i>.</p>
                    <image path="listarAlunos.png">Exemplo da listagem de professores.</image>
                    <p>Segue-se o ficheiro .js utilizado para povoar a tabela de alunos, sendo que a <i>script</i> para povoar a tabela dos professores é idêntica.</p>
                    <code>
        var index=0;
        $(document).ready(function(){
        for(index=0;index &lt; nomes.length;index++){
            $("#alunos").append("&lt;tr>&lt;td>"+ids[index]+"&lt;/td&gt;
            &lt;td&gt;"+nomes[index]+"&lt;/td&gt;
            &lt;td&gt;"+instrumentos[index]+"&lt;/td&gt;
            &lt;td&gt;&lt;input type=\"button\" onclick=\"location.href=\'alterarAluno.php?idAluno="+ids[index]+"\'\" value=\"Alterar\"/&gt;&lt;/td&gt;
                &lt;td&gt;&lt;input type=\"button\" onclick=\"location.href=\'removerAluno.php?idAluno="+ids[index]+"\'\" value=\"Remover\"/&gt;&lt;/td&gt;
                    &lt;td&gt;&lt;input type=\"button\" onclick=\"location.href=\'consultarAluno.php?idAluno="+ids[index]+"\'\" value=\"Consultar\"/&gt;&lt;/td&gt;
                    &lt;/tr&gt;");
                        }
                        });
                    </code>
                </subsubsection>
                <subsubsection>
                    <title>Adicionar um Aluno/Professor</title>
                    <p>O ato de adicionar um aluno ou professor ao sistema é feito através de um formulário <i>HTML</i> com uma <i>script</i> de atendimento em <i>PHP</i> que utilizando <i>DOM</i> adiciona um novo elemento ao ficheiro <i>XML</i> com as informações recebidas do formulário.</p>
                    <p>De seguida mostra-se a <i>script PHP</i> utilizada para adicionar os elementos ao <i>XML</i>:</p>
                    <code>
&lt;?php
$logs = new DOMDocument(); 
$logs-&gt;load('alunos.xml');
 
$log = $logs-&gt;createElement('aluno');
$id = $logs-&gt;createAttribute('id');
$id-&gt;value = $_GET['id'];
$nome = $logs-&gt;createElement('nome',$_GET['nome']);
$dataNasc = $logs-&gt;createElement('dataNasc',$_GET['dataNasc']);
$curso = $logs-&gt;createElement('curso',$_GET['curso']);
$anoCurso = $logs-&gt;createElement('anoCurso',$_GET['ano']);
$instrumento = $logs-&gt;createElement('instrumento',$_GET['instrumentos']);
 
$log-&gt;appendChild($id);
$log-&gt;appendChild($nome);
$log-&gt;appendChild($dataNasc);
$log-&gt;appendChild($curso);
$log-&gt;appendChild($anoCurso);
$log-&gt;appendChild($instrumento);
 
$logs-&gt;documentElement-&gt;appendChild($log);
 
$logs-&gt;save("alunos.xml");

header("Location:alunos.html");
                    </code>
                    <p>Seguem-se exemplos ilustrativos dos formulários de criação de um aluno e de um professor.</p>
                    <image path="adicionarAluno.png">Exemplo de preenchimento do formulário de criação de um aluno.</image>
                    <image path="adicionarProfessor.png">Exemplo de preenchimento do formulário de criação de um professor.</image>
                </subsubsection>
                <subsubsection>
                    <title>Alterar um Aluno/Professor</title>
                    <p>A funcionalidade de alterar um aluno ou professor é também ela processada a partir de um formulário <i>HTML</i>, semelhante ao respetivo para adicionar, mas já inicialmente preenchido com as informações pré-alteração do aluno ou professor escolhido. Assumimos que o id de um aluno não pode ser alterado pois isso não faria grande sentido.</p>
                    <p>Após feitas as alterações no formulário e submetido o mesmo é chamada a <i>script</i> de atendimento em <i>PHP</i> utilizando <i>SimpleXML</i> que altera o nodo respetivo do <i>XML</i> com as informações do formulário.</p>
                    <p> Segue-se a <i>script</i> utilizada para preencher o formulário com os dados do aluno escolhido (funciona igual para o professor).</p>
                    <code>
&lt;?php
                            
include('consultarAluno.html');

$id = $_REQUEST['idAluno'];

$logs = simplexml_load_file("alunos.xml");
  
$aluno = $logs-&gt;xpath("//aluno[@id='".$id."']");

echo "&lt;div class='newFormDiv'&gt;";
echo "&lt;form action='doAlterarAluno.php' class='newForm'&gt;";
echo "Id: &lt;input type='text' name='id' value='".(string)$aluno[0]['id']."'size='3' readonly&gt; &lt;br/&gt;";
echo "Nome: &lt;input type='text' name='nome' value='".(string)$aluno[0]-&gt;nome."'size='45'&gt; &lt;br/&gt;";
echo "Data de Nascimento: &lt;input type='text' name='data'value='".(string)$aluno[0]-&gt;dataNasc."' size='6'&gt; &lt;br/&gt;";
echo "Curso: &lt;select name='cursos' id='cursos'&gt;&lt;option selected='selected'&gt;".(string)$aluno[0]-&gt;curso."&lt;/option&gt;&lt;/select&gt;&lt;br/&gt;";
echo "Ano do Curso: &lt;input type='text' name='ano' value='".(string)$aluno[0]-&gt;anoCurso."'size='1'&gt;&lt;br/&gt;"; 
echo "Instrumento: &lt;select name='instrumentos' id='instrumentos'&gt;&lt;option selected='selected'&gt;".(string)$aluno[0]-&gt;instrumento."&lt;/option&gt;&lt;/select&gt;&lt;br/&gt;";
echo "&lt;center&gt;&lt;input type='submit' id='bigButton' value='Alterar'&gt; &lt;/center&gt;";
?&gt;
                    </code>
                    <p>Para além desta <i>script</i> juntamos ainda a que trata de alterar os valores no <i>XML</i>:</p>
                    <code>
&lt;?php
                            
$oldId = $_REQUEST['id'];

$logs = simplexml_load_file("alunos.xml");
  
$alunos= $logs-&gt;xpath("//aluno[@id='".$oldId."']");
	
	foreach ($alunos as $aluno) {
		$aluno-&gt;nome = $_REQUEST['nome'];
		$aluno-&gt;dataNasc = $_REQUEST['data'];
		$aluno-&gt;curso= $_REQUEST['cursos'];
		$aluno-&gt;anoCurso = $_REQUEST['ano'];
		$aluno-&gt;instrumento = $_REQUEST['instrumentos'];
	}
	
header("Location:alunos.html");
$logs-&gt;asXML('alunos.xml');
?&gt;
                    </code>
                    <p>Segue-se um exemplo ilustrativo do formulário de alteração de um aluno.</p>
                    <image path="alterarProfessor.png">Exemplo da alteração de um aluno.</image>
                </subsubsection>
                <subsubsection>
                    <title>Remover um Aluno/Professor/Audição</title>
                    <p>Para remover um aluno,professor ou audição do sistema recorremos novamente ao <i>DOM</i> numa <i>script PHP</i> que recebe como argumento o id do aluno ou professor a remover e facilmente o remove do documento <i>XML</i> correspondente.</p>
                    <p>Segue-se a <i>script</i> de remoção de um aluno, sendo que a de um professor e de uma audição é semelhante.</p>
                    <code>
&lt;?php 
                            
$logs = new DOMDocument(); 
$logs-&gt;load('alunos.xml');

$alunos = $logs-&gt;getElementsByTagName('aluno');

foreach ($alunos as $aluno) {
	$id = $aluno-&gt;getAttribute("id");
	if($id == $_REQUEST['idAluno']){
    	$aluno-&gt;parentNode-&gt;removeChild($aluno);}
	}
	
$logs-&gt;save("alunos.xml");
header("Location:alunos.html");
?&gt;
                    </code>
                </subsubsection>
                <subsubsection>
                    <title>Listar Audições</title>
                    <p>A listagem de audições é feita de forma semelhante à listagem de alunos e professores mas com uma ligeira diferença: existe a opção de filtrar as audições distinguindo as que ainda vão decorrer das que já decorreram.</p>
                    <p>Para além disso para cada audição existem dois botões adicionais relativos às funcionalidades de gerar um <i>PDF</i> e uma página <i>HTML</i> para publicitar audição. Isto foi conseguido com o auxílio de uma biblioteca <i>Javascript</i>, <i>moment.js</i> que oferece funcionalidades para lidar com datas.</p>
                    <p>Seguem-se imagens ilustrativas da listagem de audições aplicando os filtros.</p>
                    <image path="audicoes.png">Listagem de todas as audições</image>
                    <image path="audicoesPass.png">Listagem das audições que já decorreram</image>
                    <image path="audicoesFut.png">Listagem das audições que ainda vão decorrer</image>
                </subsubsection>
                <subsubsection>
                    <title>Adicionar uma Audição</title>
                    <p>Uma das funcionalidades que a plataforma deve oferecer é o planeamento/adição de uma audição ao armazenamento de dados da escola.</p>
                    <p>Este planeamento será feito através de um simples ficheiro de texto em que o utilizador poderá introduzir os dados da audição de acordo com algumas regras especificadas por uma gramática desenvolvida por nós.</p>
                    <code>

grammar plano;

@members{
    DataInterface dataInterface = new DataInterface();
    Audicao audition  = new Audicao();
}


audicao: 'Audição'  nome           {audition.setNome($nome.text);}
         'Local:'   local          {audition.setLocal($local.text);}
         'Data:'    data           {audition.setData($data.day, $data.month, $data.year);}
         'Início:'  hora           {audition.setInicio($hora.hours, $hora.minutes);}
         'Duração:' hora           {audition.setDuracao($hora.hours, $hora.minutes);}
         plano
                                   {dataInterface.addAudicao(audition);}
       ;

plano:       a1=atuacao            {audition.addAtuacao($a1.a);}
        (';' a2=atuacao            {audition.addAtuacao($a2.a);})*
     ;

atuacao returns [Atuacao a]:
    nome                           {$a = new Atuacao(dataInterface, $nome.text);}
    'Alunos:' aluno[$a]*
    'Professores:' professor[$a]*
    'Peças:' peca[$a]*
    'Duração:' hora                {$a.setDuracao($hora.hours, $hora.minutes);}
    ;



aluno [Atuacao a]:
    IDA                            { a.addAluno($IDA.text); }
    ;


professor [Atuacao a]:
    IDP                            { a.addProfessor($IDP.text); }
    ;

peca [Atuacao a]:
    IDO                            { a.addPeca($IDO.text); }
    ;

nome:   STRING;
local:  STRING;


data returns [int day, int month, int year]:
    d=INT '-' m=INT '-' y=INT      { $day = $d.int;
                                     $month = $m.int;
                                     $year = $y.int;}
    ;


hora returns [int hours, int minutes]:
    h=INT ':' m=INT              { $hours = $h.int;
                                   $minutes = $m.int;}
    ;
                    </code>
                    <p>Essa gramática foi totalmente desenvolvida utilizando <i>ANTLR</i> e mais tarde completada com atributos e recorrendo a funcionalidades do <i>Java</i> para as ações semânticas.</p>
                    <p>Para além de validar o formato do ficheiro de planeamento de uma audição fornecido pelo utilizador esta gramática terá a função de verificar se a informação inserida está de acordo com o armazenamento de dados (alunos existem, professor existe e obras existem) e, caso tudo esteja correto, adicionar a informação sobre a audição ao repositório de dados da escola.</p>
                    <p>Sendo o nosso armazenamento de dados um conjunto de ficheiros <i>XML</i> tivemos de recorrer a algumas bibliotecas do <i>Java</i> com funções especifícas para podermos consultar e manipular os seus dados.</p>
                    <p>Executando esta gramática, se não ocorrerem erros,  é gerado código <i>XML</i> relativo à audição presente no ficheiro de <i>input</i>. Este código é adicionado no final do ficheiro de audições já existente no repositório de dados. </p>
                    <p>Os erros que são verificados são a existência dos alunos, professores e obras no nosso repositório de dados do sistema, ou seja, verifica a sua existência sempre nos ficheiros pré-definidos do repositório de dados.</p>
                    <p>Quando ocorre um erro este causa uma excepção que é imprimida tanto para o <i>standard input</i> como para um ficheiro de <i>logs</i> e a audição não é adicionada.</p>
                    <p>Na aplicação <i>Web</i> quando é pressionado o botão para adicionar uma nova audição é apresentada uma caixa de texto em que podemos digitar o ficheiro de entrada para a criação da audição. Após ter escrito o texto de entrada e clicado no botão "Adicionar" o ficheiro de texto é enviado por <i>POST Request</i> para o servidor, onde é processado por uma script <i>PHP</i> que por sua vez chama, com o commando <i>exec</i>, o <i>ANTLR</i> que, por fim, analisa o input que lhe foi passado. <b>TODO: !!!!!!!!!!!!!!!!!!!!!!!COMO?????????????????</b></p>
                    <p>Para além disso é também dada a opção de importar um ficheiro de texto já existente e executar o <i>ANTLR</i> para o ficheiro escolhido.</p>
                    <image path="adicionaraudicao.PNG">Exemplo de um ficheiro de entrada para a criação de uma audição inserido na interface da aplicação <i>Web</i>.</image>
                    <p>Se não ocorrerem erros no processamento do ficheiro pelo <i>ANTLR</i> é mostrada uma caixa de diálogo informando que a audição foi inserida com sucesso e somos reencaminhados de novo para a listagem de audições, agora com umalinha adicional na tabela.</p>
                    <p>Se ocorrerem erros ... <b>TODO: !!!!!!!!!!!!!!!!CONTINUAR E ACRESCENTAR PRINTS DOS ERROS PARA O EXEMPLO!!!!!!!!!!!!!!!!!!!!!!!</b></p>
                </subsubsection>
                <subsubsection>
                    <title>Gerar <i>PDF</i> para uma Audição</title>
                    <p>Outra das funcionalidades que o nosso sistema oferece é a possibilidade de gerar um documento <i>PDF</i> para uma audição.</p>
                    <p>Para isto foi necessário criar um <i>XSL</i> que gerasse um ficheiro <i>FO (Formatting objects)</i> que por sua vez gera um documento <i>PDF</i> para um determinado documento <i>XML</i>.</p>
                </subsubsection>
                <subsubsection>
                    <title>Gerar página <i>HTML</i> para uma Audição</title>
                    <p>Para além do <i>PDF</i> é ainda possível gerar uma página <i>HTML</i> para publicitar uma audição.</p>
                    <p>Isto é feito através de um <i>XSL</i> simples que transforma um <i>XML</i> num <i>HTML</i>.</p>
                    <p>De seguida apresentamos o <i>XML</i> de uma audição e o resultado.</p>
                    <code>
&lt;audicao id="A1">
   &lt;nome&gt;Récita 1º Dezembro&lt;/nome&gt;
   &lt;data&gt;2040-12-01&lt;/data&gt;
   &lt;local&gt;Theatro Circo&lt;/local&gt;
   &lt;inicio&gt;22:30&lt;/inicio&gt;
   &lt;duracao&gt;150 min&lt;/duracao&gt;
   &lt;atuacoes&gt;
       &lt;atuacao&gt;
            &lt;nome&gt;Ritmo Fluente&lt;/nome&gt;
            &lt;duracao&gt;40 min&lt;/duracao&gt;
            &lt;alunos&gt;
               &lt;aluno&gt;A1510&lt;/aluno&gt;
               &lt;aluno&gt;A32597&lt;/aluno&gt;
           &lt;/alunos&gt;
           &lt;professores&gt;
               &lt;professor&gt;P1&lt;/professor&gt;
               &lt;professor&gt;P2&lt;/professor&gt;
           &lt;/professores&gt;
           &lt;obras&gt;
               &lt;obra&gt;O134&lt;/obra&gt;
           &lt;/obras&gt;
       &lt;/atuacao&gt;
       &lt;atuacao&gt;
           &lt;nome&gt;Vários Ritmos&lt;/nome&gt;
           &lt;duracao&gt;50 min&lt;/duracao&gt;
           &lt;alunos&gt;
               &lt;aluno&gt;A32597&lt;/aluno&gt;
               &lt;aluno&gt;A38165&lt;/aluno&gt;
           &lt;/alunos&gt;
           &lt;professores&gt;
               &lt;professor&gt;P1&lt;/professor&gt;
               &lt;professor&gt;P2&lt;/professor&gt;
           &lt;/professores&gt;
           &lt;obras&gt;
               &lt;obra&gt;O1&lt;/obra&gt;
           &lt;/obras&gt;
       &lt;/atuacao&gt;
       &lt;atuacao&gt;
           &lt;nome&gt;Rapsódia&lt;/nome&gt;
           &lt;duracao&gt;50 min&lt;/duracao&gt;
           &lt;alunos&gt;
               &lt;aluno&gt;A32597&lt;/aluno&gt;
               &lt;aluno&gt;A38165&lt;/aluno&gt;
           &lt;/alunos&gt;
           &lt;professores&gt;
               &lt;professor&gt;P1&lt;/professor&gt;
               &lt;professor&gt;P2&lt;/professor&gt;
           &lt;/professores&gt;
           &lt;obras&gt;
               &lt;obra&gt;O1&lt;/obra&gt;
           &lt;/obras&gt;
       &lt;/atuacao&gt;
   &lt;/atuacoes&gt;
&lt;/audicao&gt;
                    </code>
                    <image path="audicaoHTML.png"><i>HTML gerado para a audição</i></image>
                </subsubsection>
            </subsection>
        </section>
        <section>
            <title>Conclusões</title>
            <subsection>
                <title>Reflexão Critíca</title>
                <p>Este trabalho permitiu-nos consolidar e dar uma aplicação mais prática aos conceitos leccionados durante todo o semestre nas Unidades Curriculares de <b>GCS</b> e <b>PRI</b>.</p>
                <p>Revelou-se um projeto bastante interessante e útil na medida em que através da sua realização foi possível melhorarmos (e até aprendermos!) muito os nossos conhecimentos em termos de aplicações <i>Web</i>.</p>
                <p>É sempre positivo poder praticar o uso de novas tecnologias, como foi o caso do <i>PHP</i> que nunca haviamos utilizado ou mesmo o <i>javascript</i>. </p>
                <p>Em termos de gramáticas foi também interessante perceber que podem ser bastante utilizáveis e úteis em casos reais.</p>
                <p>O maior obstáculo que encontramos na realização deste trabalho foi o facto de o <i>PHP</i> não suportar o <i>XSL 2.0</i>, o que fez com que tivessemos que encontrar alternativas para o <i>xsl:result-document</i> de forma a poder gerar documentos através do <i>XSL</i>.</p>
            </subsection>
            <subsection>
                <title>Trabalho Futuro</title>
                <p>Como trabalho futuro fica , antes de mais, tornar a plataforma mais apelativa e atual visualmente. </p>
                <p>Gostariamos ainda de alargá-la de forma a lidar com mais informação (cursos, obras, compositores, grupos de alunos) e criar funcionalidades de registo de vários tipos de utilizador (alunos, professores, gerentes das escolas) de forma a que se tornasse uma plataforma completa para uma escola de música em que se pudessem,por exemplo, marcar aulas e gerir horários</p>
            </subsection>
        </section>
    </body>
</report>
